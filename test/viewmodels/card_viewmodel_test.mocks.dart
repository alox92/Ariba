// Mocks generated by Mockito 5.4.6 from annotations
// in flashcards_app/test/viewmodels/card_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i11;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flashcards_app/domain/entities/card.dart' as _i8;
import 'package:flashcards_app/domain/failures/failures.dart' as _i7;
import 'package:flashcards_app/domain/repositories/card_repository.dart' as _i2;
import 'package:flashcards_app/domain/repositories/deck_repository.dart' as _i4;
import 'package:flashcards_app/domain/usecases/card_usecases.dart' as _i5;
import 'package:flashcards_app/domain/usecases/deck_usecases.dart' as _i9;
import 'package:flashcards_app/services/media_service.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCardRepository_0 extends _i1.SmartFake
    implements _i2.CardRepository {
  _FakeCardRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeckRepository_2 extends _i1.SmartFake
    implements _i4.DeckRepository {
  _FakeDeckRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCardsByDeckUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCardsByDeckUseCase extends _i1.Mock
    implements _i5.GetCardsByDeckUseCase {
  MockGetCardsByDeckUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CardRepository);

  @override
  _i6.Stream<_i3.Either<_i7.Failure, List<_i8.Card>>> call(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [deckId],
        ),
        returnValue:
            _i6.Stream<_i3.Either<_i7.Failure, List<_i8.Card>>>.empty(),
      ) as _i6.Stream<_i3.Either<_i7.Failure, List<_i8.Card>>>);
}

/// A class which mocks [AddCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCardUseCase extends _i1.Mock implements _i5.AddCardUseCase {
  MockAddCardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Card>> call(
          _i5.AddCardParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.Card>>.value(
            _FakeEither_1<_i7.Failure, _i8.Card>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.Card>>);
}

/// A class which mocks [UpdateCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCardUseCase extends _i1.Mock implements _i5.UpdateCardUseCase {
  MockUpdateCardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Card>> call(
          _i5.UpdateCardParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.Card>>.value(
            _FakeEither_1<_i7.Failure, _i8.Card>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.Card>>);
}

/// A class which mocks [DeleteCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCardUseCase extends _i1.Mock implements _i5.DeleteCardUseCase {
  MockDeleteCardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>> call(int? cardId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [cardId],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i7.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [cardId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>);
}

/// A class which mocks [GetCardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCardUseCase extends _i1.Mock implements _i5.GetCardUseCase {
  MockGetCardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CardRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCardRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CardRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Card>> call(int? cardId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [cardId],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.Card>>.value(
            _FakeEither_1<_i7.Failure, _i8.Card>(
          this,
          Invocation.method(
            #call,
            [cardId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.Card>>);
}

/// A class which mocks [UpdateDeckCardCountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateDeckCardCountUseCase extends _i1.Mock
    implements _i9.UpdateDeckCardCountUseCase {
  MockUpdateDeckCardCountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DeckRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDeckRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.DeckRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>> call(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [deckId],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i7.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [deckId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>);
}

/// A class which mocks [MediaService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaService extends _i1.Mock implements _i10.MediaService {
  MockMediaService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String?> pickImage() => (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> takePhoto() => (super.noSuchMethod(
        Invocation.method(
          #takePhoto,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> recordAudio() => (super.noSuchMethod(
        Invocation.method(
          #recordAudio,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> pickAudio() => (super.noSuchMethod(
        Invocation.method(
          #pickAudio,
          [],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<void> playAudio(String? audioPath) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [audioPath],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> stopAudio() => (super.noSuchMethod(
        Invocation.method(
          #stopAudio,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String> saveMedia(
    _i11.File? file,
    String? subFolder,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMedia,
          [
            file,
            subFolder,
          ],
        ),
        returnValue: _i6.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #saveMedia,
            [
              file,
              subFolder,
            ],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> deleteMedia(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteMedia,
          [filePath],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String?> processImage(String? imagePath) => (super.noSuchMethod(
        Invocation.method(
          #processImage,
          [imagePath],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> processAudio(String? audioPath) => (super.noSuchMethod(
        Invocation.method(
          #processAudio,
          [audioPath],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<void> clearMediaCache() => (super.noSuchMethod(
        Invocation.method(
          #clearMediaCache,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
