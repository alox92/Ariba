// Mocks generated by Mockito 5.4.6 from annotations
// in flashcards_app/test/usecases/review_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flashcards_app/domain/entities/card.dart' as _i6;
import 'package:flashcards_app/domain/failures/failures.dart' as _i5;
import 'package:flashcards_app/domain/repositories/card_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardRepository extends _i1.Mock implements _i3.CardRepository {
  MockCardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Card>>> watchCardsByDeck(
          int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCardsByDeck,
          [deckId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Card>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Card>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Card>>> watchCardsDueForReview(
          int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCardsDueForReview,
          [deckId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Card>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Card>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Card>>> getCardsForDeck(
          int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardsForDeck,
          [deckId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Card>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Card>>(
          this,
          Invocation.method(
            #getCardsForDeck,
            [deckId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Card>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Card>> getCard(int? cardId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCard,
          [cardId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Card>>.value(
            _FakeEither_0<_i5.Failure, _i6.Card>(
          this,
          Invocation.method(
            #getCard,
            [cardId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Card>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Card>> addCard(_i6.Card? card) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCard,
          [card],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Card>>.value(
            _FakeEither_0<_i5.Failure, _i6.Card>(
          this,
          Invocation.method(
            #addCard,
            [card],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Card>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Card>> updateCard(_i6.Card? card) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCard,
          [card],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Card>>.value(
            _FakeEither_0<_i5.Failure, _i6.Card>(
          this,
          Invocation.method(
            #updateCard,
            [card],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Card>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteCard(int? cardId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCard,
          [cardId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteCard,
            [cardId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
