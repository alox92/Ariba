// Mocks generated by Mockito 5.4.6 from annotations
// in flashcards_app/test/usecases/deck_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flashcards_app/domain/entities/deck.dart' as _i6;
import 'package:flashcards_app/domain/failures/failures.dart' as _i5;
import 'package:flashcards_app/domain/repositories/deck_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeckRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeckRepository extends _i1.Mock implements _i3.DeckRepository {
  MockDeckRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Deck>>> watchDecks() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchDecks,
          [],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Deck>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Deck>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>> getDeckById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeckById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>>.value(
            _FakeEither_0<_i5.Failure, _i6.Deck>(
          this,
          Invocation.method(
            #getDeckById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>> addDeck(_i6.Deck? deck) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDeck,
          [deck],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>>.value(
            _FakeEither_0<_i5.Failure, _i6.Deck>(
          this,
          Invocation.method(
            #addDeck,
            [deck],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>> updateDeck(_i6.Deck? deck) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeck,
          [deck],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>>.value(
            _FakeEither_0<_i5.Failure, _i6.Deck>(
          this,
          Invocation.method(
            #updateDeck,
            [deck],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Deck>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteDeck(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDeck,
          [deckId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteDeck,
            [deckId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateCardCount(int? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCardCount,
          [deckId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateCardCount,
            [deckId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
